## How to start a terraform project?

1. create main.tf file
  - This is the file, where you for example define resource groups and which provider you are using
  - In this case, we use azurerm to make a connection between terraform and azure API
2. login to your Azure account
  - This was done, for example, with Azure CLI
3. Add information to your main.tf file 
  - Azure provider link: https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs

## Useful commands

terraform init 
  - Initialises terraform-related information
  - .terraform is not committed to versison control as it contains some metadata of how terraform runs in backend

terraform fmt
  - runs terraform format command and cleans whitespaces 
  - does not check or test your code

terraform plan
  - runs a plan based on main.tf
  - basically it checks what you have defined

terraform apply
  - this will deploy your resources to defined provider

terraform state list
  - this will show what resources we currently have

terraform state show azurerm_resource_group.mtc-rg
  - this will show information about the resource

terraform plan -destroy 
  - this will show what will be destroyed

terraform apply -destroy
  - this is the actual destroy command
  - you can restore the previous state by using the backup file

## Subnet address

address_space = ["10.123.0.0/16"]

  - This gives the IP address range for the network
  - This is the starting point: 10.123.0.0
  - /16 means prefix lenght, i.e. how many addresses there could be

## Public IP
  - Public ID allows a connection over the internet
  - Public IPs are for example added to VMs to make them accessible over the internet
  - As Public IPs are open for the internet, security groups should ne used and VPN for secure remote access

## SSH
  - Private key and public key
  - ssh-keygen creates new key under ~/.ssh

## SSH extension
  - Use this to add ssh keys to your specified files 
  - You can also run linux or windows on your local computer in Vscode

## Variable definition
  - Variables can be defined dynamically in a separate variables file

## docker
  - Docker is used to automate deployment using containers
  - Containers bundle an application and all its depedencies into a single package
  - Docker engine: Runs and manages containers
  - Docker images: Read only that contain the application and its depedencies


continue from 58:00 https://youtu.be/V53AHWun17s

